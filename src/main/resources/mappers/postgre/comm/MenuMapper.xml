<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="kr.co.igns.framework.comm.dao.postgre.MenuDao">
        
    <select id="getUserMenu" parameterType="kr.co.igns.framework.comm.model.MenuReqDto" 
    					resultType="kr.co.igns.framework.comm.model.UserMenuVO">
		WITH RECURSIVE menuList AS (
		    select e.*
			from tb_menu_auth_grp c 
				left join tb_menu_info e on c.domain_cd = e.domain_cd and c.menu_cd = e.menu_cd 	
			where c.authgrp_cd in (select b.authgrp_cd 
									from tb_user_auth_grp a
										inner join tb_auth_grp b on a.authgrp_cd = b.authgrp_cd 
									where a.domain_cd = #{domainCd}
								  	  and a.user_id = #{userId})
			union
			select g.* 
			from tb_menu_user_auth f
				left join tb_menu_info g on f.domain_cd = g.domain_cd and f.menu_cd = g.menu_cd 
			where f.domain_cd = #{domainCd}
			  and f.user_id = #{userId}
		  UNION ALL
		    SELECT ch.*
		    FROM tb_menu_info ch
		  JOIN menuList ON menuList.prnts_cd = ch.menu_cd
		  )
		select y.domain_cd, y.menu_cd, y.menu_nm, y.icon, y.level, y.sort, y.prnts_cd
			, coalesce(x.basic_aclc, w.basic_aclc) as basic_aclc 
			, coalesce(x.basic_aclr, w.basic_aclr) as basic_aclr
			, coalesce(x.basic_aclu, w.basic_aclu) as basic_aclu
			, coalesce(x.basic_acld, w.basic_acld) as basic_acld 
		from menuList z 
			inner join tb_menu_info y on z.domain_cd = y.domain_cd and z.menu_cd = y.menu_cd
			left join tb_menu_user_auth x on z.domain_cd = x.domain_cd and z.menu_cd = x.menu_cd
			left join tb_menu_auth_grp w on z.domain_cd = w.domain_cd and z.menu_cd = w.menu_cd
		where y.use_yn = 'Y'
			and z.domain_cd = #{domainCd}
		group by y.domain_cd, y.menu_cd, y.menu_nm, y.icon, y.level, y.sort, y.prnts_cd
					, coalesce(x.basic_aclc, w.basic_aclc), coalesce(x.basic_aclr, w.basic_aclr), coalesce(x.basic_aclu, w.basic_aclu), coalesce(x.basic_acld, w.basic_acld)
		order by y.level, y.sort
    </select>
    
    <!-- userId의 도메인에 등록된 메뉴 리스트 -->
    <select id="getMenuById" parameterType="kr.co.igns.framework.comm.model.MenuReqDto" 
    					resultType="kr.co.igns.framework.comm.model.MenuVO">
        select tmi.*
		from tb_menu_info tmi
			inner join tb_user_info tui on tui.domain_cd = tmi.domain_cd
		where tui.user_id = #{userId}
		  and tmi.domain_cd = #{domainCd}
    </select>
    
    <!-- 도메인 코드의 메뉴 리스트 -->
    <select id="getMenuByDomain" parameterType="kr.co.igns.framework.comm.model.MenuReqDto"
    					resultType="kr.co.igns.framework.comm.model.MenuVO">
    	select a.*
		from tb_menu_info a
		where domain_cd = #{domainCd}
		order by level, sort
    </select>
    
        <!-- 공통코드 검색 조건   -->    
    <sql id="searchLowerLevel">
		<if test='menuCd != null and !menuCd.equals("")'>
			AND prnts.menu_cd = #{menuCd}
		</if>
	</sql>
	
    <!-- 하위메뉴리스트 조회 -->
    <select id="getLowerLevelMenu" parameterType="kr.co.igns.framework.comm.model.MenuReqDto"
    					resultType="kr.co.igns.framework.comm.model.MenuVO">
    	WITH RECURSIVE Q AS (
		    SELECT prnts.*
		    FROM tb_menu_info prnts
		    WHERE 1=1
		    	<include refid="searchLowerLevel" />
		  UNION ALL
		    SELECT prnts.*
		    FROM tb_menu_info prnts
		  JOIN Q ON Q.menu_cd = prnts.prnts_cd
		  )
		SELECT distinct(AA.*) 
		     , CASE WHEN (SELECT COUNT(*) FROM tb_menu_info WHERE prnts_cd = AA.menu_cd) > 0 THEN 0
		       ELSE 1 END AS ISLEAF
		FROM Q AA
		where domain_cd = #{domainCd}
    </select>
    
    <insert id="createMenu" parameterType="kr.co.igns.framework.comm.model.MenuVO">
    	INSERT INTO public.tb_menu_info
			(domain_cd
			, menu_cd
			, menu_nm
			, prnts_cd
			, sort
			, level
			, use_yn
			, note
			, EXPANDED
			, menu_url
			, icon
			, insert_id
			, insert_dt
			)
		VALUES(
			#{domainCd}
			, #{menuCd}
			, #{menuNm}
			, #{prntsCd}
			, #{sort}
			, #{level}
			, #{useYn}
			, #{note}
			, #{expanded}
			, #{menuUrl}
			, #{icon}
			, #{insertId}
			, NOW()
			)
    </insert>
    
    <update id="updateMenu" parameterType="kr.co.igns.framework.comm.model.MenuVO">
    	update public.tb_menu_info 
			set menu_nm 		= #{menuNm}
				,prnts_cd	= #{prntsCd}
				,sort			= #{sort}
				,level			= #{level}
				,use_yn			= #{useYn}
				,note 			= #{note}
				,menu_url		= #{menuUrl}
				,icon			= #{icon}
				,EXPANDED		= #{expanded}
				,update_id		= #{updateId}
				,update_dt		= NOW()
			where domain_cd = #{domainCd} 
				and menu_cd = #{menuCd}
    </update>
    
    <delete id="deleteMenu" parameterType="kr.co.igns.framework.comm.model.MenuVO">
    	delete from tb_menu_info 
    	where domain_cd = #{domainCd} 
			and menu_cd = #{menuCd}
    </delete>
    
</mapper>